// scripts/rutVin_VinDice.js
// R√∫t VIN t·ª´ h·ª£p ƒë·ªìng VinDiceV2 (ch·ªâ OWNER). KH√îNG c·∫ßn "type":"module".
// C√°ch ch·∫°y:
//   node scripts/rutVin_VinDice.js 25                      -> r√∫t 25 VIN v·ªÅ v√≠ OWNER
//   node scripts/rutVin_VinDice.js 12.5 0xRecipient...    -> r√∫t 12.5 VIN v·ªÅ ƒë·ªãa ch·ªâ ch·ªâ ƒë·ªãnh

(async () => {
  // n·∫°p ethers theo c√°ch t∆∞∆°ng th√≠ch CJS (tr√°nh l·ªói "Cannot use import statement...")
  const { ethers } = await import("ethers");

  // ===== C·∫§U H√åNH =====
  const RPC_URL    = "https://rpc.viction.xyz";
  const PRIVATE_KEY = "0xYOUR_PRIVATE_KEY_HERE"; // ‚ö†Ô∏è thay b·∫±ng private key v√≠ OWNER
  const VIN_DICE_ADDRESS = "0x9b8BfcAFa8bCaC35B8EdC7682ec6d60B0d1ED1f2"; // VinDiceV2 m·ªõi
  const VIN_DECIMALS = 18;

  // ABI t·ªëi thi·ªÉu c·∫ßn d√πng
  const VIN_DICE_ABI = [
    "function owner() view returns (address)",
    "function bankroll() view returns (uint256)",
    "function ownerWithdraw(uint256 amount, address to) external"
  ];

  // ===== THAM S·ªê D√íNG L·ªÜNH =====
  const amountStr  = process.argv[2] || "10";   // m·∫∑c ƒë·ªãnh r√∫t 10 VIN
  const toAddress  = process.argv[3] || null;   // n·∫øu b·ªè tr·ªëng -> r√∫t v·ªÅ v√≠ owner
  const amountWei  = ethers.parseUnits(String(amountStr), VIN_DECIMALS);

  console.log("üîÅ K·∫øt n·ªëi m·∫°ng VIC‚Ä¶");
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const wallet   = new ethers.Wallet(PRIVATE_KEY, provider);
  const dice     = new ethers.Contract(VIN_DICE_ADDRESS, VIN_DICE_ABI, wallet);

  // X√°c th·ª±c quy·ªÅn owner
  const onchainOwner = await dice.owner();
  if (onchainOwner.toLowerCase() !== wallet.address.toLowerCase()) {
    throw new Error(`V√≠ hi·ªán t·∫°i (${wallet.address}) KH√îNG PH·∫¢I owner. Owner on-chain: ${onchainOwner}`);
  }

  const recipient = toAddress || wallet.address;

  // Th√¥ng tin pool tr∆∞·ªõc khi r√∫t
  const before = await dice.bankroll();
  console.log(`üè¶ Pool tr∆∞·ªõc khi r√∫t: ${ethers.formatUnits(before, VIN_DECIMALS)} VIN`);
  console.log(`üöÄ Th·ª±c hi·ªán r√∫t ${amountStr} VIN v·ªÅ: ${recipient}`);

  // Fee overrides (∆∞u ti√™n EIP-1559, fallback legacy)
  const fee = await provider.getFeeData();
  const overrides = { gasLimit: 200_000n };

  if (fee.maxFeePerGas && fee.maxPriorityFeePerGas) {
    const minPrio = ethers.parseUnits("3",  "gwei");
    const minMax  = ethers.parseUnits("12", "gwei");
    const prio = fee.maxPriorityFeePerGas >= minPrio ? fee.maxPriorityFeePerGas : minPrio;
    let maxFee = fee.maxFeePerGas * 2n + prio;
    if (maxFee < minMax) maxFee = minMax;
    overrides.maxFeePerGas = maxFee;
    overrides.maxPriorityFeePerGas = prio;
  } else {
    const fallbackGP = ethers.parseUnits("8", "gwei");
    overrides.gasPrice = fee.gasPrice ?? fallbackGP;
  }

  try {
    const tx = await dice.ownerWithdraw(amountWei, recipient, overrides);
    console.log("‚è≥ ƒê√£ g·ª≠i giao d·ªãch, tx:", tx.hash);
    const rc = await tx.wait();
    console.log("‚úÖ R√∫t VIN th√†nh c√¥ng! Tx Hash:", rc.hash);

    const after = await dice.bankroll();
    console.log(`üè¶ Pool sau khi r√∫t: ${ethers.formatUnits(after, VIN_DECIMALS)} VIN`);
  } catch (err) {
    console.error("‚ùå L·ªói khi r√∫t VIN:", err?.reason || err?.message || err);
    process.exit(1);
  }
})().catch((e) => {
  console.error("‚ùå L·ªói kh·ªüi ch·∫°y:", e?.message || e);
  process.exit(1);
});
